@page "/fetchdata"
@using SavacFarma.Shared
@using SavacFarma_Shared
@inject HttpClient Http
@inject IRepositorio repositorio



                @if (forecasts == null)
                {
                    <p><em>Loading...</em></p>
                }
                else
                {
                    @*<table class="table">
                <thead>
                    <tr>
                        <th>Date</th>
                        <th>Temp. (C)</th>
                        <th>Temp. (F)</th>
                        <th>Summary</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var forecast in forecasts)
                    {
                        <tr>
                            <td>@forecast.Date.ToShortDateString()</td>
                            <td>@forecast.TemperatureC</td>
                            <td>@forecast.TemperatureF</td>
                            <td>@forecast.Summary</td>
                        </tr>
                    }
                </tbody>
            </table>*@

                    #region Toolbar
                    <div class="btn-toolbar" role="toolbar" aria-label="Toolbar with button groups">
                        <div class="btn-group mr-2" role="group" aria-label="First group">
                            <button type="button" class="btn btn-secondary">1</button>
                            <button type="button" class="btn btn-secondary">2</button>
                            <button type="button" class="btn btn-secondary">3</button>
                            <button type="button" class="btn btn-secondary">4</button>
                        </div>
                        <div class="btn-group mr-2" role="group" aria-label="Second group">
                            <button type="button" class="btn btn-secondary">5</button>
                            <button type="button" class="btn btn-secondary">6</button>
                            <button type="button" class="btn btn-secondary">7</button>
                        </div>
                        <div class="btn-group" role="group" aria-label="Third group">
                            <button type="button" class="btn btn-secondary">8</button>
                        </div>
                    </div>
                    #endregion Toolbar

                    #region Grid
                    <TelerikGrid Class="d-none d-lg-flex my-4" Data=@forecasts
                                 SelectedItemsChanged="@((IEnumerable<WeatherForeCast> k) => OnSelect(k))"
                                 SelectedItems="@SelectedItems"
                                 Resizable=true
                                 FilterMode="@GridFilterMode.FilterRow"
                                 EditMode="@GridEditMode.Inline"
                                 SelectionMode="@GridSelectionMode.Multiple"
                                 Pageable=true PageSize=8>
                        <GridToolBar>
                            <GridCommandButton Command="Add" Icon="add">Create</GridCommandButton>
                        </GridToolBar>
                        <GridColumns>
                            <GridCheckboxColumn SelectAll="true"></GridCheckboxColumn>
                            <GridColumn Field=@nameof(WeatherForeCast.Date) Title="Fecha" Editable=@IsEditable />
                            <GridColumn Field=@nameof(WeatherForeCast.TemperatureC) Title="Temp C" Editable=@IsEditable />
                            <GridColumn Field=@nameof(WeatherForeCast.TemperatureF) Title="Temp F" Editable="false" />
                            <GridColumn Field=@nameof(WeatherForeCast.Summary) Title="Info" Editable=@IsEditable />
                            @if (IsEditable)
                                    {
                                <GridCommandColumn>
                                    <GridCommandButton Command="Edit" Icon="edit"></GridCommandButton>
                                    <GridCommandButton Command="Delete" Icon="delete">Delete</GridCommandButton>
                                    <GridCommandButton Command="Save" Icon="save" ShowInEdit="true">Update</GridCommandButton>
                                    <GridCommandButton Command="Cancel" Icon="cancel" ShowInEdit="true">Cancel</GridCommandButton>
                                </GridCommandColumn>
                                    }
                        </GridColumns>
                    </TelerikGrid>

                    <TelerikGrid Class="d-flex d-lg-none" Data=@forecasts
                                 Resizable=true
                                 FilterMode="@GridFilterMode.FilterMenu"
                                 SelectionMode="@GridSelectionMode.Multiple"
                                 SelectedItemsChanged="@((IEnumerable<WeatherForeCast> k) => OnSelect(k))"
                                 SelectedItems="@SelectedItems"
                                 EditMode="@GridEditMode.Inline"
                                 Pageable=true PageSize=4>
                        <GridToolBar>
                            <GridCommandButton Command="Add" Icon="add">Create</GridCommandButton>
                        </GridToolBar>
                        <GridColumns>
                            <GridCheckboxColumn SelectAll="true"></GridCheckboxColumn>
                            <GridColumn Field=@nameof(WeatherForeCast.Date) Title="Fecha" Editable=@IsEditable />
                            <GridColumn Field=@nameof(WeatherForeCast.TemperatureC) Title="Temp C" Editable=@IsEditable />
                            <GridColumn Field=@nameof(WeatherForeCast.TemperatureF) Title="Temp F" Editable="false" />
                            <GridColumn Field=@nameof(WeatherForeCast.Summary) Title="Info" Editable=@IsEditable />
                            @if (IsEditable)
                                    {
                                <GridCommandColumn>
                                    <GridCommandButton Command="Edit" Icon="edit">Edit</GridCommandButton>
                                    <GridCommandButton Command="Delete" Icon="delete">Delete</GridCommandButton>
                                    <GridCommandButton Command="Save" Icon="save" ShowInEdit="true">Update</GridCommandButton>
                                    <GridCommandButton Command="Cancel" Icon="cancel" ShowInEdit="true">Cancel</GridCommandButton>
                                </GridCommandColumn>
                                    }
                        </GridColumns>
                    </TelerikGrid>
                    #endregion Grid

                }
       
        @code {
            [Parameter] public string Minimized { get; set; }

            List<WeatherForeCast> forecasts;
            int PageSize = 5;
            string Height = "300px";
            bool IsEditable = true;
            public IEnumerable<WeatherForeCast> SelectedItems { get; set; } = Enumerable.Empty<WeatherForeCast>();

            protected override async Task OnInitializedAsync()
            {
                await GetForecasts();
            }

            async Task GetForecasts()
            {
                //forecasts = await ForecastService.GetForecastListAsync(DateTime.Now);

                //var httpResponse = await repositorio.Get<List<WeatherForeCast>>("api/Weather/filterTemp?maxTemp=50&minTemp=5");
                var httpResponse = await repositorio.Get<List<WeatherForeCast>>("api/WeatherForeCasts");
                if (httpResponse.Error)
                {
                    var body = httpResponse.HttpResponseMessage.Content.ReadAsStringAsync();
                    Console.WriteLine(body);
                }
                else
                {

                    forecasts = httpResponse.Response;
                }
            }

            protected void OnSelect(IEnumerable<WeatherForeCast> elements)
            {

                SelectedItems = elements.ToList();
                IsEditable = SelectedItems.Count() == 0;
            }

        }
