@inject IJSRuntime _js
<nav class="navbar navbar-dark d-inline-block mimenu p-0">
    <div class="logobutton justify-content-center">
        <a href="#" class="navbar-brand">Logo</a>
        <button id="menutoggle" class="navbar-toggler d-block d-md-inline small" type="button"
                @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon small"></span>
        </button>
        <EnlacesMain class="d-block d-md-none p-1"></EnlacesMain>
    </div>



    <div id="menudiv" class="@(NavMenuCssClass + " pt-2 mimenu_c")">
        <MenuT />
        @*<ul class="nav flex-column text-left text-white">
                <li class="nav-item px-3">
                    <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                        <span class="oi oi-home" aria-hidden="true"></span> Home
                    </NavLink>
                </li>
                <li class="nav-item px-3">
                    <NavLink class="nav-link" href="counter">
                        <span class="oi oi-plus" aria-hidden="true"></span> Counter
                    </NavLink>
                </li>
                <li class="nav-item px-3">
                    <NavLink class="nav-link" href="fetchdata">
                        <span class="oi oi-list-rich" aria-hidden="true"></span> Fetch data
                    </NavLink>
                </li>
            </ul>*@
    </div>
</nav>

@code {
    [Parameter] public EventCallback<bool> OnCollapsedMenu { get; set; }
    [Parameter] public bool MenuCollapsed { get; set; }

    private bool collapseNavMenu = false;

    private string NavMenuCssClass => collapseNavMenu ? "collapse" : "";

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
        MenuCollapsed = collapseNavMenu;
        OnCollapsedMenu.InvokeAsync(MenuCollapsed);
    }
}
