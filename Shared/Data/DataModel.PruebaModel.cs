//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using EF Core template.
// Code is generated on: 03/06/2020 20:47:53
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using System.Data;
using System.Linq;
using System.Linq.Expressions;
using System.ComponentModel;
using System.Reflection;
using System.Data.Common;
using System.Collections.Generic;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Internal;
using Microsoft.EntityFrameworkCore.Metadata;

namespace SavacFarma_Shared
{

    public partial class PruebaModel : DbContext
    {

        public PruebaModel() :
            base()
        {
            OnCreated();
        }

        public PruebaModel(DbContextOptions<PruebaModel> options) :
            base(options)
        {
            OnCreated();
        }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured ||
                (!optionsBuilder.Options.Extensions.OfType<RelationalOptionsExtension>().Any(ext => !string.IsNullOrEmpty(ext.ConnectionString) || ext.Connection != null) &&
                 !optionsBuilder.Options.Extensions.Any(ext => !(ext is RelationalOptionsExtension) && !(ext is CoreOptionsExtension))))
            {
                optionsBuilder.UseSqlServer(@"Data Source=DESKTOP-7AVUJGR\SQLEXPRESS;Initial Catalog=Prueba;Integrated Security=True;Persist Security Info=True");
            }
            CustomizeConfiguration(ref optionsBuilder);
            base.OnConfiguring(optionsBuilder);
        }

        partial void CustomizeConfiguration(ref DbContextOptionsBuilder optionsBuilder);

        public virtual DbSet<Usuario> Usuarios
        {
            get;
            set;
        }

        public virtual DbSet<WeatherForeCast> WeatherForeCasts
        {
            get;
            set;
        }

        public virtual DbSet<Process> Processes
        {
            get;
            set;
        }

        public virtual DbSet<UserProcess> UserProcesses
        {
            get;
            set;
        }

        public virtual DbSet<Ubication> Ubications
        {
            get;
            set;
        }

        public virtual DbSet<UbicationGroup> UbicationGroups
        {
            get;
            set;
        }

        #region Methods

        public List<WeatherForeCast> MiFunc (int? minf, int? maxf)
        {

            List<WeatherForeCast> result = new List<WeatherForeCast>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.Text;
                    cmd.CommandText = @"select * from dbo.MiFunc(@minf, @maxf)";

                    DbParameter minfParameter = cmd.CreateParameter();
                    minfParameter.ParameterName = "minf";
                    minfParameter.Direction = ParameterDirection.Input;
                    minfParameter.DbType = DbType.Int32;
                    minfParameter.Precision = 10;
                    minfParameter.Scale = 0;
                    if (minf.HasValue)
                    {
                        minfParameter.Value = minf.Value;
                    }
                    else
                    {
                        minfParameter.Size = -1;
                        minfParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(minfParameter);

                    DbParameter maxfParameter = cmd.CreateParameter();
                    maxfParameter.ParameterName = "maxf";
                    maxfParameter.Direction = ParameterDirection.Input;
                    maxfParameter.DbType = DbType.Int32;
                    maxfParameter.Precision = 10;
                    maxfParameter.Scale = 0;
                    if (maxf.HasValue)
                    {
                        maxfParameter.Value = maxf.Value;
                    }
                    else
                    {
                        maxfParameter.Size = -1;
                        maxfParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(maxfParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            WeatherForeCast row = new WeatherForeCast();
                            if (fieldNames.Contains("Id") && !reader.IsDBNull(reader.GetOrdinal("Id")))
                                row.Id = (long)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Id")), typeof(long));

                            if (fieldNames.Contains("Date") && !reader.IsDBNull(reader.GetOrdinal("Date")))
                                row.Date = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Date")), typeof(System.DateTime));

                            if (fieldNames.Contains("TemperatureC") && !reader.IsDBNull(reader.GetOrdinal("TemperatureC")))
                                row.TemperatureC = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"TemperatureC")), typeof(int));

                            if (fieldNames.Contains("Summary") && !reader.IsDBNull(reader.GetOrdinal("Summary")))
                                row.Summary = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Summary")), typeof(string));
                            else
                                row.Summary = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<List<WeatherForeCast>> MiFuncAsync (int? minf, int? maxf)
        {

            List<WeatherForeCast> result = new List<WeatherForeCast>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.Text;
                    cmd.CommandText = @"select * from dbo.MiFunc(@minf, @maxf)";

                    DbParameter minfParameter = cmd.CreateParameter();
                    minfParameter.ParameterName = "minf";
                    minfParameter.Direction = ParameterDirection.Input;
                    minfParameter.DbType = DbType.Int32;
                    minfParameter.Precision = 10;
                    minfParameter.Scale = 0;
                    if (minf.HasValue)
                    {
                        minfParameter.Value = minf.Value;
                    }
                    else
                    {
                        minfParameter.Size = -1;
                        minfParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(minfParameter);

                    DbParameter maxfParameter = cmd.CreateParameter();
                    maxfParameter.ParameterName = "maxf";
                    maxfParameter.Direction = ParameterDirection.Input;
                    maxfParameter.DbType = DbType.Int32;
                    maxfParameter.Precision = 10;
                    maxfParameter.Scale = 0;
                    if (maxf.HasValue)
                    {
                        maxfParameter.Value = maxf.Value;
                    }
                    else
                    {
                        maxfParameter.Size = -1;
                        maxfParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(maxfParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            WeatherForeCast row = new WeatherForeCast();
                            if (fieldNames.Contains("Id") && !reader.IsDBNull(reader.GetOrdinal("Id")))
                                row.Id = (long)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Id")), typeof(long));

                            if (fieldNames.Contains("Date") && !reader.IsDBNull(reader.GetOrdinal("Date")))
                                row.Date = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Date")), typeof(System.DateTime));

                            if (fieldNames.Contains("TemperatureC") && !reader.IsDBNull(reader.GetOrdinal("TemperatureC")))
                                row.TemperatureC = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"TemperatureC")), typeof(int));

                            if (fieldNames.Contains("Summary") && !reader.IsDBNull(reader.GetOrdinal("Summary")))
                                row.Summary = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Summary")), typeof(string));
                            else
                                row.Summary = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        #endregion

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            this.UsuarioMapping(modelBuilder);
            this.CustomizeUsuarioMapping(modelBuilder);

            this.WeatherForeCastMapping(modelBuilder);
            this.CustomizeWeatherForeCastMapping(modelBuilder);

            this.ProcessMapping(modelBuilder);
            this.CustomizeProcessMapping(modelBuilder);

            this.UserProcessMapping(modelBuilder);
            this.CustomizeUserProcessMapping(modelBuilder);

            this.UbicationMapping(modelBuilder);
            this.CustomizeUbicationMapping(modelBuilder);

            this.UbicationGroupMapping(modelBuilder);
            this.CustomizeUbicationGroupMapping(modelBuilder);

            RelationshipsMapping(modelBuilder);
            CustomizeMapping(ref modelBuilder);
        }

        #region Usuario Mapping

        private void UsuarioMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Usuario>().ToTable(@"Usuario", @"dbo");
            modelBuilder.Entity<Usuario>().Property<int>(x => x.Id).HasColumnName(@"Id").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<Usuario>().Property<string>(x => x.UserName).HasColumnName(@"UserName").HasColumnType(@"varchar(50)").IsRequired().ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<Usuario>().Property<string>(x => x.Password).HasColumnName(@"Password").HasColumnType(@"varchar(20)").IsRequired().ValueGeneratedNever().HasMaxLength(20);
            modelBuilder.Entity<Usuario>().Property<string>(x => x.CultureInfo).HasColumnName(@"CultureInfo").HasColumnType(@"varchar(5)").IsRequired().ValueGeneratedNever().HasMaxLength(5).HasDefaultValueSql(@"'es-ES'");
            modelBuilder.Entity<Usuario>().HasKey(@"Id");
        }

        partial void CustomizeUsuarioMapping(ModelBuilder modelBuilder);

        #endregion

        #region WeatherForeCast Mapping

        private void WeatherForeCastMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<WeatherForeCast>().ToTable(@"WeatherForeCast", @"dbo");
            modelBuilder.Entity<WeatherForeCast>().Property<long>(x => x.Id).HasColumnName(@"Id").HasColumnType(@"bigint").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<WeatherForeCast>().Property<System.DateTime>(x => x.Date).HasColumnName(@"Date").HasColumnType(@"datetime").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<WeatherForeCast>().Property<int>(x => x.TemperatureC).HasColumnName(@"TemperatureC").HasColumnType(@"int").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<WeatherForeCast>().Property<string>(x => x.Summary).HasColumnName(@"Summary").HasColumnType(@"varchar(100)").ValueGeneratedNever().HasMaxLength(100);
            modelBuilder.Entity<WeatherForeCast>().HasKey(@"Id");
        }

        partial void CustomizeWeatherForeCastMapping(ModelBuilder modelBuilder);

        #endregion

        #region Process Mapping

        private void ProcessMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Process>().ToTable(@"Process", @"dbo");
            modelBuilder.Entity<Process>().Property<int>(x => x.IdProcess).HasColumnName(@"IdProcess").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<Process>().Property<int?>(x => x.IdParent).HasColumnName(@"IdParent").HasColumnType(@"int").ValueGeneratedNever();
            modelBuilder.Entity<Process>().Property<string>(x => x.DesProcess).HasColumnName(@"DesProcess").HasColumnType(@"nvarchar(50)").IsRequired().ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<Process>().Property<int>(x => x.ProcessType).HasColumnName(@"ProcessType").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasDefaultValueSql(@"1");
            modelBuilder.Entity<Process>().HasKey(@"IdProcess");
        }

        partial void CustomizeProcessMapping(ModelBuilder modelBuilder);

        #endregion

        #region UserProcess Mapping

        private void UserProcessMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<UserProcess>().ToTable(@"UserProcess", @"dbo");
            modelBuilder.Entity<UserProcess>().Property<int>(x => x.IdUser).HasColumnName(@"IdUser").HasColumnType(@"int").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<UserProcess>().Property<int>(x => x.IdProcess).HasColumnName(@"IdProcess").HasColumnType(@"int").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<UserProcess>().HasKey(@"IdUser", @"IdProcess");
        }

        partial void CustomizeUserProcessMapping(ModelBuilder modelBuilder);

        #endregion

        #region Ubication Mapping

        private void UbicationMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Ubication>().ToTable(@"Ubication", @"dbo");
            modelBuilder.Entity<Ubication>().Property<int>(x => x.Id).HasColumnName(@"Id").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<Ubication>().Property<string>(x => x.DesUbication).HasColumnName(@"DesUbication").HasColumnType(@"varchar(50)").IsRequired().ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<Ubication>().Property<int>(x => x.IdUbicationGroup).HasColumnName(@"IdUbicationGroup").HasColumnType(@"int").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Ubication>().Property<string>(x => x.State).HasColumnName(@"State").HasColumnType(@"varchar(50)").IsRequired().ValueGeneratedNever().HasMaxLength(50).HasDefaultValueSql(@"'Libre'");
            modelBuilder.Entity<Ubication>().HasKey(@"Id");
        }

        partial void CustomizeUbicationMapping(ModelBuilder modelBuilder);

        #endregion

        #region UbicationGroup Mapping

        private void UbicationGroupMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<UbicationGroup>().ToTable(@"UbicationGroup", @"dbo");
            modelBuilder.Entity<UbicationGroup>().Property<int>(x => x.Id).HasColumnName(@"Id").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<UbicationGroup>().Property<string>(x => x.DesGroupUbication).HasColumnName(@"DesGroupUbication").HasColumnType(@"varchar(50)").IsRequired().ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<UbicationGroup>().HasKey(@"Id");
        }

        partial void CustomizeUbicationGroupMapping(ModelBuilder modelBuilder);

        #endregion

        private void RelationshipsMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<UserProcess>().HasOne(x => x.Usuario).WithMany(op => op.UserProcesses).IsRequired(true).HasForeignKey(@"IdUser");
            modelBuilder.Entity<UserProcess>().HasOne(x => x.Process).WithMany(op => op.UserProcesses).IsRequired(true).HasForeignKey(@"IdProcess");

            modelBuilder.Entity<Ubication>().HasOne(x => x.UbicationGroup).WithMany(op => op.Ubications).IsRequired(true).HasForeignKey(@"IdUbicationGroup");
        }

        partial void CustomizeMapping(ref ModelBuilder modelBuilder);

        public bool HasChanges()
        {
            return ChangeTracker.Entries().Any(e => e.State == Microsoft.EntityFrameworkCore.EntityState.Added || e.State == Microsoft.EntityFrameworkCore.EntityState.Modified || e.State == Microsoft.EntityFrameworkCore.EntityState.Deleted);
        }

        partial void OnCreated();
    }
}
